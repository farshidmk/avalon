{"version":3,"sources":["components/Start.jsx","components/ShowCharactersToPlayers.jsx","components/Missions.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","startSection","width","height","padding","maxWidth","backgroundColor","display","flexDirection","playersNo","minWidth","playersName","margin","flexWrap","justifyContent","textField","charactersSection","border","borderRadius","badCharacter","color","textAlign","goodCharacter","ROYAL_SERVANT","name","isBad","CHARACTERS","Start","props","classes","useState","setPlayersNo","setPlayersName","useEffect","newArr","i","className","Typography","variant","align","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","map","number","MenuItem","key","length","Array","keys","pn","index","TextField","label","handlePlayersNameChange","Button","onClick","onStart","slice","ShowCharacters","ch","Character","clsx","background","playerCardRoot","marginTop","alignItems","characterSection","minHeight","ShowCharactersToPlayers","playersRole","setPlayersRole","playerIndex","setPlayerIndex","characters","players","temp","evilsTeam","merlinsFace","randomCharacter","Math","floor","random","role","indexOf","splice","forEach","player","push","knowingPlayers","onPlayersGetRole","nextPlayer","onGameStart","CardToShowPlayers","showRole","setShowRole","style","marginButton","Collapse","in","merlin","fullWidth","disabled","missionsRoot","boardRoot","round","missionFailed","missionSuccess","currentMission","cursor","animationName","animationDuration","animationTimingFunction","animationIterationCount","modal","modalRoot","palette","paper","buttonsSection","from","to","Missions","isLargeScreen","useMediaQuery","playersWithRole","PLAYERS_NO","PLAYERS_ORDER_IN_MISSION","openChoosePlayers","setOpenChoosePlayers","king","setKing","tempMission","trm","status","missions","setMissions","setCurrentMission","playersNoInMission","setPlayersNoInMission","playersInMission","setPlayersInMission","votingFailedCounter","setVotingFailedCounter","showMission","setShowMission","winner","setWinner","missionCompleted","result","counter","mission","onMissionCompleted","Grid","container","spacing","item","xs","md","open","handleClose","p","onVotingResult","isApproved","ChoosePlayers","choosePlayersReminder","setChoosePlayersReminder","showVotingResult","setShowVotingResult","Modal","disableBackdropClick","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","FormGroup","FormControlLabel","control","Checkbox","checked","includes","pim","filter","PlayerInMission","setMissionFailed","indexCounter","setIndexCounter","handleClickVote","vote","root","overflow","App","step","setStep","setPlayers","setCharacters","setPlayersWithRole","pr","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3991ae0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  startSection: {\n    width: \"100%\",\n    height: \"100%\",\n    padding: \"5px\",\n    maxWidth: \"800px\",\n    backgroundColor: \"antiquewhite\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  playersNo: {\n    minWidth: \"200px\",\n  },\n  playersName: {\n    margin: \"10px 0px\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n  textField: {\n    minWidth: \"185px\",\n    margin: \"5px\",\n  },\n  charactersSection: {\n    margin: \"10px\",\n    border: \"2px solid #a2a2a2\",\n    borderRadius: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n  },\n  badCharacter: {\n    minWidth: \"100px\",\n    margin: \"5px\",\n    backgroundColor: \"#aa303099\",\n    border: \"1px solid red\",\n    color: \"black\",\n    textAlign: \"center\",\n  },\n  goodCharacter: {\n    minWidth: \"100px\",\n    margin: \"5px\",\n    backgroundColor: \"#2020aaaa\",\n    border: \"1px solid blue\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n}));\n\nconst ROYAL_SERVANT = { name: \"loyal servant\", isBad: false };\nconst CHARACTERS = [\n  ROYAL_SERVANT,\n  { name: \"Merlin\", isBad: false },\n  { name: \"Percival\", isBad: false },\n  { name: \"Morgana\", isBad: true },\n  { name: \"Assassin\", isBad: true },\n  ROYAL_SERVANT,\n  { name: \"Mordred\", isBad: true },\n  ROYAL_SERVANT,\n  ROYAL_SERVANT,\n  { name: \"Oberon\", isBad: true },\n];\n\nconst Start = (props) => {\n  const classes = useStyles();\n  const [playersNo, setPlayersNo] = useState(5);\n  const [playersName, setPlayersName] = useState([]);\n\n  function handlePlayersNameChange(name, index) {\n    let newArr = [];\n    for (let i = 0; i < playersNo; i++) {\n      if (i === index) {\n        newArr[i] = name;\n      } else {\n        newArr[i] = playersName[i];\n      }\n    }\n    setPlayersName(newArr);\n  }\n\n  useEffect(() => {\n    let newArr = [];\n    for (let i = 0; i < playersNo; i++) {\n      if (playersName[i]) {\n        newArr[i] = playersName[i];\n      } else {\n        newArr[i] = `p${i + 1}`;\n      }\n    }\n    setPlayersName(newArr);\n  }, [playersNo]);\n\n  return (\n    <div className={classes.startSection}>\n      <Typography variant=\"h3\" align=\"center\">\n        Avalon\n      </Typography>\n      <FormControl className={classes.playersNo}>\n        <InputLabel id=\"player-number\">Player Number</InputLabel>\n        <Select\n          labelId=\"player-number\"\n          id=\"player-number-select\"\n          value={playersNo}\n          onChange={(e) => setPlayersNo(e.target.value)}\n        >\n          {[5, 6, 7, 8, 9, 10].map((number) => {\n            return (\n              <MenuItem key={number} value={number}>\n                {number}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n      {playersName.length > 0 ? (\n        <div className={classes.playersName}>\n          {[...Array(playersNo).keys()].map((pn, index) => {\n            return (\n              <TextField\n                className={classes.textField}\n                key={pn}\n                id={`player${pn + 1}-name`}\n                label={`player ${pn + 1}`}\n                variant=\"outlined\"\n                value={playersName[index]}\n                onChange={(e) => {\n                  handlePlayersNameChange(e.target.value, index);\n                }}\n              />\n            );\n          })}\n        </div>\n      ) : null}\n      <div className={classes.charactersSection}>\n        <ShowCharacters playersNo={playersNo} />\n      </div>\n      <Button\n        onClick={() =>\n          props.onStart(playersName, CHARACTERS.slice(0, playersNo))\n        }\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Start\n      </Button>\n    </div>\n  );\n};\n\nexport default Start;\n\nconst ShowCharacters = (props) => {\n  return (\n    <>\n      {CHARACTERS.slice(0, props.playersNo).map((ch, index) => (\n        <Character key={index} name={ch.name} isBad={ch.isBad} />\n      ))}\n    </>\n  );\n};\nconst Character = (props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx({\n        [classes.badCharacter]: props.isBad,\n        [classes.goodCharacter]: !props.isBad,\n      })}\n    >\n      <h5>{props.name}</h5>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nconst useStyles = makeStyles((theme) => ({\n  badCharacter: {\n    minWidth: \"100px\",\n    margin: \"5px\",\n    backgroundColor: \"#aa303099\",\n    border: \"3px solid #aa3030\",\n    color: \"white\",\n    textAlign: \"center\",\n    background:\n      \"radial-gradient(circle, rgba(255,0,0,1) 0%, rgba(0,0,0,1) 87%)\",\n  },\n  goodCharacter: {\n    minWidth: \"100px\",\n    margin: \"5px\",\n    backgroundColor: \"#2020aaaa\",\n    border: \"3px solid white\",\n    color: \"black\",\n    textAlign: \"center\",\n    background:\n      \"radial-gradient(circle, rgb(217 222 255) 0%, rgba(0,32,247,1) 87%)\",\n  },\n  playerCardRoot: {\n    width: \"500px\",\n    marginTop: \"10px\",\n    display: \"flex\",\n    padding: \"5px\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    border: \"3px solid black\",\n    borderRadius: \"15px 15px 15px 15px\",\n    backgroundColor: \"#5b5b5b\",\n  },\n  characterSection: {\n    minWidth: \"300px\",\n    minHeight: \"150px\",\n    padding: \"10px\",\n    borderRadius: \"5px 5px 5px 5px\",\n  },\n}));\n\nconst ShowCharactersToPlayers = (props) => {\n  const [playersRole, setPlayersRole] = useState([]);\n  const [playerIndex, setPlayerIndex] = useState(0);\n\n  useEffect(() => {\n    let characters = [...props.characters];\n    let players = [...props.players];\n    let temp = [];\n    let evilsTeam = [];\n    let merlinsFace = [];\n    for (let i = 0; i < props.characters.length; i++) {\n      let randomCharacter =\n        characters[Math.floor(Math.random() * characters.length)];\n      temp[i] = { name: players[i], role: randomCharacter };\n      let index = characters.indexOf(randomCharacter);\n      if (index > -1) {\n        characters.splice(index, 1);\n      }\n    }\n    temp.forEach((player) => {\n      if (player.role.isBad) {\n        evilsTeam.push(player.name);\n      }\n      if (player.role.name === \"Merlin\" || player.role.name === \"Morgana\") {\n        merlinsFace.push(player.name);\n      }\n    });\n    temp.forEach((player) => {\n      if (player.role.isBad || player.role.name === \"Merlin\") {\n        player.knowingPlayers = evilsTeam;\n      }\n      if (player.role.name === \"Percival\") {\n        player.merlinsFace = merlinsFace;\n      }\n    });\n    setPlayersRole(temp);\n  }, [props.characters, props.players]);\n  useEffect(() => {\n    return () => props.onPlayersGetRole(playersRole);\n  });\n\n  return (\n    <div>\n      {playersRole.length ? (\n        <CardToShowPlayers\n          player={playersRole[playerIndex]}\n          nextPlayer={() => {\n            if (playerIndex >= playersRole.length - 1) {\n              props.onGameStart();\n            } else {\n              setPlayerIndex((i) => i + 1);\n            }\n          }}\n        />\n      ) : (\n        <h1>Avalon</h1>\n      )}\n    </div>\n  );\n};\n\nexport default ShowCharactersToPlayers;\n\nconst CardToShowPlayers = (props) => {\n  const classes = useStyles();\n  const [showRole, setShowRole] = useState(false);\n  // const[timer, setTimer]\n\n  return (\n    <div className={classes.playerCardRoot}>\n      <h3>{props.player.name}</h3>\n      <p>\n        روی دکمه زیر بزنید تا شخصیت شما را{showRole ? \" مخفی کند\" : \"نشان دهد\"}{\" \"}\n      </p>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => setShowRole((i) => !i)}\n        style={{ marginButton: \"15px\" }}\n      >\n        {showRole ? \" مخفی کردن \" : \" نمایش دادن \"}\n      </Button>\n      <Collapse in={showRole}>\n        <div\n          className={clsx(classes.characterSection, {\n            [classes.badCharacter]: props.player.role.isBad,\n            [classes.goodCharacter]: !props.player.role.isBad,\n          })}\n        >\n          <h3>{props.player.role.name}</h3>\n          {props.player.role.isBad ? (\n            <>\n              <p>هم تیمی های شما :</p>\n              {props.player.knowingPlayers.map((player, index) => (\n                <h5 key={index} style={{ color: \"black\" }}>\n                  {player}\n                </h5>\n              ))}\n            </>\n          ) : props.player.role.name === \"Percival\" ? (\n            <>\n              <p>\n                یکی از دو بازیکنان زیر مرلین است و دیگری خود را در نقش مرلین جا\n                زده است\n              </p>\n              {props.player.merlinsFace.map((merlin, index) => (\n                <h5 key={`merlin-face-${index}`}>{merlin}</h5>\n              ))}\n            </>\n          ) : props.player.role.name === \"Merlin\" ? (\n            <>\n              <p>\n                شما تیم شیطان را میشناسید ولی آنها نباید متوجه نقش شما در بازی\n                شوند\n              </p>\n              {props.player.knowingPlayers.map((player, index) => (\n                <h3 key={index} style={{ color: \"red\" }}>\n                  {player}\n                </h3>\n              ))}\n            </>\n          ) : (\n            <p>\n              شما از یاران وفادار پادشاهی هستید و در ماموریت ها حتما باید موفقیت\n              را انتخاب کنید\n            </p>\n          )}\n        </div>\n      </Collapse>\n      <Button\n        onClick={() => {\n          props.nextPlayer();\n        }}\n        style={{ margin: \"5px\", marginTop: \"55px\" }}\n        fullWidth\n        variant=\"contained\"\n        disabled={showRole}\n      >\n        بازیکن بعدی\n      </Button>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  missionsRoot: {\n    width: \"100vw\",\n    height: \"100vh\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  boardRoot: {\n    width: \"85%\",\n    height: \"90%\",\n    backgroundColor: \"#grey\",\n    border: \"2px solid black\",\n    borderRadius: \"5px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  round: {\n    borderRadius: \"50%\",\n    border: \"2px solid red\",\n    margin: \"5px\",\n    height: \"10vh\",\n    width: \"10vh\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  missionFailed: {\n    backgroundColor: \"red\",\n  },\n  missionSuccess: {\n    backgroundColor: \"blue\",\n  },\n  currentMission: {\n    cursor: \"pointer\",\n    animationName: \"$blinker\",\n    animationDuration: \"2s\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  modalRoot: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid red\",\n    borderRadius: \"10px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    maxWidth: \"500px\",\n    minWidth: \"300px\",\n    margin: \"auto\",\n  },\n  playersName: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  buttonsSection: {\n    display: \"flex\",\n    margin: \"5px 2px\",\n    justifyContent: \"space-evenly\",\n  },\n  \"@keyframes blinker\": {\n    from: { backgroundColor: \"red\" },\n    to: { backgroundColor: \"blue\" },\n  },\n}));\n\nconst Missions = (props) => {\n  const classes = useStyles();\n  const isLargeScreen = useMediaQuery(\"(min-width:600px)\");\n  const { playersWithRole } = props;\n  const PLAYERS_NO = playersWithRole.length;\n  const PLAYERS_ORDER_IN_MISSION = [\n    [2, 3, 2, 3, 3],\n    [2, 3, 4, 3, 4],\n    [2, 3, 3, 4, 4],\n    [3, 4, 4, 5, 5],\n    [3, 4, 4, 5, 5],\n    [3, 4, 4, 5, 5],\n  ];\n\n  const [openChoosePlayers, setOpenChoosePlayers] = useState(false);\n  const [king, setKing] = useState(\n    playersWithRole &&\n      playersWithRole[Math.floor(Math.random() * Math.floor(PLAYERS_NO))].name\n  );\n  const [missions, setMissions] = useState(() => {\n    let tempRoadMap = PLAYERS_ORDER_IN_MISSION[PLAYERS_NO - 5];\n    let tempMission = [];\n    tempRoadMap.forEach((trm) => {\n      tempMission.push({ players: trm, status: \"not-completed\" });\n    });\n    return tempMission;\n  });\n  const [currentMission, setCurrentMission] = useState(0);\n  const [playersNoInMission, setPlayersNoInMission] = useState(\n    missions[currentMission]\n  );\n  const [playersInMission, setPlayersInMission] = useState([]);\n  const [votingFailedCounter, setVotingFailedCounter] = useState(0);\n  const [showMission, setShowMission] = useState(false);\n  const [winner, setWinner] = useState(\"\");\n\n  function missionCompleted(result) {\n    let temp = missions;\n    if (!result) {\n      temp[currentMission] = {\n        players: temp[currentMission].players,\n        status: \"success\",\n      };\n    } else {\n      temp[currentMission] = {\n        players: temp[currentMission].players,\n        status: \"failed\",\n      };\n    }\n    setPlayersNoInMission(missions[currentMission + 1]);\n    setCurrentMission((i) => i + 1);\n    setMissions(temp);\n    setShowMission(false);\n    setPlayersInMission([]);\n    if (currentMission >= 2) {\n      let counter = 0;\n      missions.forEach((mission) => {\n        if (mission.status === \"failed\") {\n          counter = counter + 1;\n        }\n      });\n      if (counter >= 3) {\n        setWinner(\"bad\");\n      } else if (currentMission - (counter + 1) >= 3) {\n        setWinner(\"good\");\n      }\n    }\n  }\n  if (winner) {\n    return (\n      <div>\n        <h1>برنده ها: {winner} </h1>\n      </div>\n    );\n  }\n  if (showMission) {\n    return (\n      <PlayerInMission\n        playersInMission={playersInMission}\n        onMissionCompleted={(result) => missionCompleted(result)}\n      />\n    );\n  }\n  return (\n    <Grid container spacing={1} className={classes.missionsRoot}>\n      <Grid item xs={12} md={4}>\n        <>\n          <h5 align=\"center\">\n            تعداد دفعات رد شده توسط شهروندان: {votingFailedCounter}\n          </h5>\n          <p align=\"center\">\n            اگر ۵بار در یک دور رای گیری به نتیجه نرسد ماموریت شکست میخورد\n          </p>\n          <h3 align=\"center\">{king} :پادشاه </h3>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              flexDirection: isLargeScreen ? \"row\" : \"column\",\n            }}\n          >\n            {missions &&\n              missions.length > 0 &&\n              missions.map((mission, index) => {\n                return (\n                  <div\n                    key={`mission-${index}`}\n                    className={clsx(classes.round, {\n                      [classes.missionFailed]: mission.status === \"failed\",\n                      [classes.missionSuccess]: mission.status === \"success\",\n                      [classes.currentMission]: index === currentMission,\n                    })}\n                    onClick={() => {\n                      if (index === currentMission) {\n                        setOpenChoosePlayers(true);\n                      }\n                    }}\n                  >\n                    {mission.players}\n                  </div>\n                );\n              })}\n          </div>\n        </>\n      </Grid>\n      <Grid item>\n        <ChoosePlayers\n          open={openChoosePlayers}\n          handleClose={() => setOpenChoosePlayers(false)}\n          playersNoInMission={playersNoInMission.players}\n          playersWithRole={playersWithRole}\n          playersInMission={playersInMission}\n          setPlayersInMission={(p) => setPlayersInMission(p)}\n          onVotingResult={(isApproved) => {\n            if (isApproved) {\n              setVotingFailedCounter(0);\n              setShowMission(true);\n            } else if (votingFailedCounter < 5) {\n              setVotingFailedCounter((i) => i + 1);\n              setShowMission(false);\n            } else {\n              setVotingFailedCounter(0);\n              missionCompleted(false);\n              setShowMission(false);\n            }\n            setKing(\n              playersWithRole[\n                Math.floor(Math.random() * Math.floor(PLAYERS_NO))\n              ].name\n            );\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Missions;\n\nconst ChoosePlayers = (props) => {\n  const classes = useStyles();\n  const [choosePlayersReminder, setChoosePlayersReminder] = useState(\n    props.playersNoInMission\n  );\n  const [showVotingResult, setShowVotingResult] = useState(false);\n\n  return (\n    <Modal\n      className={classes.modal}\n      open={props.open}\n      disableBackdropClick\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className={classes.modalRoot}>\n        {choosePlayersReminder > 0 ? (\n          <h5>{`Choose ${choosePlayersReminder} Players`}</h5>\n        ) : (\n          <h5>click start to vote</h5>\n        )}\n\n        <FormGroup className={classes.playersName}>\n          {props.playersWithRole.map((player, index) => {\n            return (\n              <FormControlLabel\n                key={`form-control-${index}`}\n                control={\n                  <Checkbox\n                    checked={props.playersInMission.includes(player)}\n                    onChange={() => {\n                      if (props.playersInMission.includes(player)) {\n                        props.setPlayersInMission((pim) =>\n                          pim.filter((p) => p !== player)\n                        );\n                        setChoosePlayersReminder((i) => i + 1);\n                      } else if (choosePlayersReminder > 0) {\n                        props.setPlayersInMission((players) => [\n                          ...players,\n                          player,\n                        ]);\n                        setChoosePlayersReminder((i) => i - 1);\n                      }\n                    }}\n                    name={player.name}\n                  />\n                }\n                label={player.name}\n              />\n            );\n          })}\n        </FormGroup>\n        <div className={classes.buttonsSection}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={choosePlayersReminder > 0 || showVotingResult}\n            onClick={() => setShowVotingResult(true)}\n          >\n            شروع\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={showVotingResult}\n            onClick={props.handleClose}\n          >\n            بستن\n          </Button>\n        </div>\n        <Collapse in={showVotingResult}>\n          <div className={classes.buttonsSection}>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                props.handleClose();\n                props.onVotingResult(true);\n                setShowVotingResult(false);\n              }}\n            >\n              افراد انتخابی قبول شدند\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => {\n                props.handleClose();\n                props.onVotingResult(false);\n                props.setPlayersInMission([]);\n                setShowVotingResult(false);\n                setChoosePlayersReminder(props.playersNoInMission);\n              }}\n            >\n              افراد انتخابی رد شدند\n            </Button>\n          </div>\n        </Collapse>\n      </div>\n    </Modal>\n  );\n};\n\nconst PlayerInMission = ({ playersInMission, onMissionCompleted }) => {\n  const [missionFailed, setMissionFailed] = useState(false);\n  const [indexCounter, setIndexCounter] = useState(0);\n\n  function handleClickVote(vote) {\n    setIndexCounter((i) => i + 1);\n    if (vote === \"failed\") {\n      setMissionFailed(true);\n    }\n    if (indexCounter >= playersInMission.length - 1) {\n      onMissionCompleted(missionFailed);\n    }\n  }\n\n  return (\n    <div>\n      {\n        <div>\n          <h2>{playersInMission[indexCounter].name}</h2>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => handleClickVote(\"success\")}\n          >\n            موفقیت\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => handleClickVote(\"failed\")}\n          >\n            شکست\n          </Button>\n        </div>\n      }\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Start from \"./components/Start\";\nimport ShowCharactersToPlayers from \"./components/ShowCharactersToPlayers\";\nimport Missions from \"./components/Missions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    overflow: \"auto\",\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [step, setStep] = useState(0);\n  const [players, setPlayers] = useState([]);\n  const [characters, setCharacters] = useState([]);\n  const [playersWithRole, setPlayersWithRole] = useState([]);\n  return (\n    <div className={classes.root}>\n      {step === 0 ? (\n        <Start\n          onStart={(players, characters) => {\n            setPlayers(players);\n            setCharacters(characters);\n            setStep(1);\n          }}\n        />\n      ) : step === 1 ? (\n        <ShowCharactersToPlayers\n          players={players}\n          characters={characters}\n          onGameStart={() => setStep(2)}\n          onPlayersGetRole={(pr) => setPlayersWithRole(pr)}\n        />\n      ) : step === 2 ? (\n        <Missions playersWithRole={playersWithRole} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}