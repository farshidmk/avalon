{"version":3,"sources":["assets/assassin.png","assets/loyalServant.png","assets/merlin.png","assets/morgana.png","assets/percival.png","assets/devil.png","assets/chooseSuccess.png","assets/chooseDefeat.png","components/Start.jsx","components/ShowCharactersToPlayers.jsx","components/Missions.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","startSection","border","borderRadius","boxShadow","padding","spacing","margin","maxWidth","display","flexDirection","overflow","playersNo","minWidth","playersName","flexWrap","justifyContent","textField","charactersSection","badCharacter","backgroundColor","color","textAlign","goodCharacter","ROYAL_SERVANT","name","isBad","CHARACTERS","Start","props","classes","useState","numberOfPlayers","setNumberOfPlayers","setPlayersName","useEffect","newArr","i","className","Typography","variant","align","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","map","number","MenuItem","key","length","Array","keys","playerNumber","index","TextField","label","handlePlayersNameChange","Button","onClick","onStart","slice","ShowCharacters","ch","Character","srcImg","merlinIcon","percivalIcon","morganaIcon","assassinIcon","loyalServantIcon","devilIcon","clsx","alt","src","background","playerCardRoot","width","marginTop","alignItems","characterSection","minHeight","ShowCharactersToPlayers","playersRole","setPlayersRole","playerIndex","setPlayerIndex","characters","players","temp","evilsTeam","merlinsFace","randomCharacter","Math","floor","random","role","indexOf","splice","forEach","player","push","knowingPlayers","onPlayersGetRole","prevPlayer","nextPlayer","onGameStart","CardToShowPlayers","showRole","setShowRole","Collapse","in","style","merlin","fullWidth","disabled","missionsRoot","height","boardRoot","flex","round","missionFailed","missionSuccess","currentMission","cursor","animationName","animationDuration","animationTimingFunction","animationIterationCount","modal","modalRoot","palette","paper","buttonsSection","gap","from","to","Missions","playersWithRole","onRestartWithSamePlayers","onNewGame","PLAYERS_NO","PLAYERS_ORDER_IN_MISSION","openChoosePlayers","setOpenChoosePlayers","isShowPlayersRole","setIsShowPlayersRole","tempMission","trm","status","missions","setMissions","setCurrentMission","playersNoInMission","setPlayersNoInMission","playersInMission","setPlayersInMission","votingFailedCounter","setVotingFailedCounter","showMission","setShowMission","winner","setWinner","missionCompleted","isFailed","counter","mission","onMissionCompleted","result","open","handleClose","p","onVotingResult","isApproved","ChoosePlayers","choosePlayersReminder","setChoosePlayersReminder","showVotingResult","setShowVotingResult","Modal","disableBackdropClick","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","FormGroup","FormControlLabel","control","Checkbox","checked","includes","pim","filter","PlayerInMission","setMissionFailed","indexCounter","setIndexCounter","handleClickVote","vote","chooseSuccess","chooseDefeat","window","alert","root","App","step","setStep","setPlayers","setCharacters","setPlayersWithRole","pr","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9f01210.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/assassin.5f668b01.png\";","module.exports = __webpack_public_path__ + \"static/media/loyalServant.e87d4aaf.png\";","module.exports = __webpack_public_path__ + \"static/media/merlin.7f22cc65.png\";","module.exports = __webpack_public_path__ + \"static/media/morgana.e58f6d8c.png\";","module.exports = __webpack_public_path__ + \"static/media/percival.a23f95b6.png\";","module.exports = __webpack_public_path__ + \"static/media/devil.df19dc75.png\";","module.exports = __webpack_public_path__ + \"static/media/chooseSuccess.d996d6d8.png\";","module.exports = __webpack_public_path__ + \"static/media/chooseDefeat.9df41631.png\";","import React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport assassinIcon from \"../assets/assassin.png\";\r\nimport loyalServantIcon from \"../assets/loyalServant.png\";\r\nimport merlinIcon from \"../assets/merlin.png\";\r\nimport morganaIcon from \"../assets/morgana.png\";\r\nimport percivalIcon from \"../assets/percival.png\";\r\nimport devilIcon from \"../assets/devil.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  startSection: {\r\n    border: \"solid black 2px\",\r\n    borderRadius: \"5px\",\r\n    boxShadow: \"0px 0px 20px black\",\r\n    padding: theme.spacing(1),\r\n    margin: theme.spacing(1),\r\n    maxWidth: \"800px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    overflow: \"auto\",\r\n  },\r\n  playersNo: {\r\n    minWidth: \"200px\",\r\n  },\r\n  playersName: {\r\n    margin: \"10px 0px\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n  textField: {\r\n    minWidth: \"185px\",\r\n    margin: \"5px\",\r\n  },\r\n  charactersSection: {\r\n    margin: \"10px\",\r\n    border: \"2px solid #a2a2a2\",\r\n    borderRadius: \"10px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  badCharacter: {\r\n    minWidth: \"100px\",\r\n    margin: \"5px\",\r\n    backgroundColor: \"#aa303099\",\r\n    border: \"1px solid red\",\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n    boxShadow: \"0px 0px 10px red\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  goodCharacter: {\r\n    minWidth: \"100px\",\r\n    margin: \"5px\",\r\n    backgroundColor: \"#2020aaaa\",\r\n    border: \"1px solid blue\",\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    boxShadow: \"0px 0px 10px #0000ff\",\r\n    borderRadius: \"10px\",\r\n  },\r\n}));\r\n\r\nconst ROYAL_SERVANT = { name: \"loyal servant\", isBad: false };\r\nconst CHARACTERS = [\r\n  ROYAL_SERVANT,\r\n  { name: \"Merlin\", isBad: false },\r\n  { name: \"Percival\", isBad: false },\r\n  { name: \"Morgana\", isBad: true },\r\n  { name: \"Assassin\", isBad: true },\r\n  ROYAL_SERVANT,\r\n  { name: \"Mordred\", isBad: true },\r\n  ROYAL_SERVANT,\r\n  ROYAL_SERVANT,\r\n  { name: \"Oberon\", isBad: true },\r\n];\r\n\r\nconst Start = (props) => {\r\n  const classes = useStyles();\r\n  const [numberOfPlayers, setNumberOfPlayers] = useState(5);\r\n  const [playersName, setPlayersName] = useState([]);\r\n\r\n  function handlePlayersNameChange(name, index) {\r\n    let newArr = [];\r\n    for (let i = 0; i < numberOfPlayers; i++) {\r\n      if (i === index) {\r\n        newArr[i] = name;\r\n      } else {\r\n        newArr[i] = playersName[i];\r\n      }\r\n    }\r\n    setPlayersName(newArr);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let newArr = [];\r\n    for (let i = 0; i < numberOfPlayers; i++) {\r\n      newArr[i] = `player ${i + 1}`;\r\n    }\r\n    setPlayersName(newArr);\r\n  }, [numberOfPlayers]);\r\n\r\n  return (\r\n    <div className={classes.startSection}>\r\n      <Typography variant=\"h3\" align=\"center\" className=\"start-title\">\r\n        Avalon\r\n      </Typography>\r\n      <FormControl className={classes.playersNo}>\r\n        <InputLabel id=\"player-number\">Player Number</InputLabel>\r\n        <Select\r\n          labelId=\"player-number\"\r\n          id=\"player-number-select\"\r\n          value={numberOfPlayers}\r\n          onChange={(e) => setNumberOfPlayers(e.target.value)}\r\n        >\r\n          {[5, 6, 7, 8, 9, 10].map((number) => {\r\n            return (\r\n              <MenuItem key={number} value={number}>\r\n                {number}\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      {playersName.length > 0 ? (\r\n        <div className={classes.playersName}>\r\n          {[...Array(numberOfPlayers).keys()].map((playerNumber, index) => {\r\n            return (\r\n              <TextField\r\n                className={classes.textField}\r\n                key={playerNumber}\r\n                id={`player${playerNumber + 1}-name`}\r\n                label={`player ${playerNumber + 1}`}\r\n                variant=\"outlined\"\r\n                value={playersName[index]}\r\n                onChange={(e) => {\r\n                  handlePlayersNameChange(e.target.value, index);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ) : null}\r\n      <div className={classes.charactersSection}>\r\n        <ShowCharacters numberOfPlayers={numberOfPlayers} />\r\n      </div>\r\n      <Button\r\n        className=\"buttons\"\r\n        onClick={() =>\r\n          props.onStart(playersName, CHARACTERS.slice(0, numberOfPlayers))\r\n        }\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n      >\r\n        Start\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n\r\nconst ShowCharacters = ({ numberOfPlayers }) => {\r\n  return (\r\n    <>\r\n      {CHARACTERS.slice(0, numberOfPlayers).map((ch, index) => (\r\n        <Character key={index} name={ch.name} isBad={ch.isBad} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nconst Character = ({ name, isBad }) => {\r\n  const classes = useStyles();\r\n  let srcImg;\r\n  switch (name) {\r\n    case \"Merlin\":\r\n      srcImg = merlinIcon;\r\n      break;\r\n    case \"Percival\":\r\n      srcImg = percivalIcon;\r\n      break;\r\n    case \"Morgana\":\r\n      srcImg = morganaIcon;\r\n      break;\r\n    case \"Assassin\":\r\n      srcImg = assassinIcon;\r\n      break;\r\n    case \"loyal servant\":\r\n      srcImg = loyalServantIcon;\r\n      break;\r\n    default:\r\n      srcImg = devilIcon;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        {\r\n          [classes.badCharacter]: isBad,\r\n          [classes.goodCharacter]: !isBad,\r\n        },\r\n        \"card-character-in-start\"\r\n      )}\r\n    >\r\n      <h5>{name}</h5>\r\n      <img className=\"character-in-start\" alt={`${name}-icon`} src={srcImg} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport assassinIcon from \"../assets/assassin.png\";\r\nimport loyalServantIcon from \"../assets/loyalServant.png\";\r\nimport merlinIcon from \"../assets/merlin.png\";\r\nimport morganaIcon from \"../assets/morgana.png\";\r\nimport percivalIcon from \"../assets/percival.png\";\r\nimport devilIcon from \"../assets/devil.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  badCharacter: {\r\n    minWidth: \"100px\",\r\n    margin: \"5px\",\r\n    backgroundColor: \"#aa303099\",\r\n    border: \"3px solid #aa3030\",\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    background:\r\n      \"radial-gradient(circle, rgb(255 143 143) 0%, rgba(0,0,0,1) 105%)\",\r\n  },\r\n  goodCharacter: {\r\n    minWidth: \"100px\",\r\n    margin: \"5px\",\r\n    backgroundColor: \"#2020aaaa\",\r\n    border: \"3px solid white\",\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n    background: \"radial-gradient(circle, rgba(255,255,255,1) 0%, #b6c0ff 87%)\",\r\n  },\r\n  playerCardRoot: {\r\n    width: \"500px\",\r\n    marginTop: \"10px\",\r\n    display: \"flex\",\r\n    padding: \"5px\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    border: \"3px solid black\",\r\n    borderRadius: \"15px 15px 15px 15px\",\r\n  },\r\n  characterSection: {\r\n    minWidth: \"300px\",\r\n    minHeight: \"150px\",\r\n    padding: \"10px\",\r\n    borderRadius: \"5px 5px 5px 5px\",\r\n  },\r\n}));\r\n\r\nconst ShowCharactersToPlayers = (props) => {\r\n  const [playersRole, setPlayersRole] = useState([]);\r\n  const [playerIndex, setPlayerIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let characters = [...props.characters];\r\n    let players = [...props.players];\r\n    let temp = [];\r\n    let evilsTeam = [];\r\n    let merlinsFace = [];\r\n    for (let i = 0; i < props.characters.length; i++) {\r\n      let randomCharacter =\r\n        characters[Math.floor(Math.random() * characters.length)];\r\n      temp[i] = { name: players[i], role: randomCharacter };\r\n      let index = characters.indexOf(randomCharacter);\r\n      if (index > -1) {\r\n        characters.splice(index, 1);\r\n      }\r\n    }\r\n    temp.forEach((player) => {\r\n      if (player.role.isBad) {\r\n        evilsTeam.push(player.name);\r\n      }\r\n      if (player.role.name === \"Merlin\" || player.role.name === \"Morgana\") {\r\n        merlinsFace.push(player.name);\r\n      }\r\n    });\r\n    temp.forEach((player) => {\r\n      if (player.role.isBad || player.role.name === \"Merlin\") {\r\n        player.knowingPlayers = evilsTeam;\r\n      }\r\n      if (player.role.name === \"Percival\") {\r\n        player.merlinsFace = merlinsFace;\r\n      }\r\n    });\r\n    setPlayersRole(temp);\r\n  }, [props.characters, props.players]);\r\n  useEffect(() => {\r\n    return () => props.onPlayersGetRole(playersRole);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {playersRole.length ? (\r\n        <CardToShowPlayers\r\n          player={playersRole[playerIndex]}\r\n          prevPlayer={\r\n            playerIndex > 0 ? () => setPlayerIndex((i) => i - 1) : false\r\n          }\r\n          nextPlayer={() => {\r\n            if (playerIndex >= playersRole.length - 1) {\r\n              props.onGameStart();\r\n            } else {\r\n              setPlayerIndex((i) => i + 1);\r\n            }\r\n          }}\r\n        />\r\n      ) : (\r\n        <h1>Avalon</h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowCharactersToPlayers;\r\n\r\nconst CardToShowPlayers = ({ player, nextPlayer, prevPlayer }) => {\r\n  const classes = useStyles();\r\n  const [showRole, setShowRole] = useState(false);\r\n  let srcImg;\r\n  switch (player.role.name) {\r\n    case \"Merlin\":\r\n      srcImg = merlinIcon;\r\n      break;\r\n    case \"Percival\":\r\n      srcImg = percivalIcon;\r\n      break;\r\n    case \"Morgana\":\r\n      srcImg = morganaIcon;\r\n      break;\r\n    case \"Assassin\":\r\n      srcImg = assassinIcon;\r\n      break;\r\n    case \"loyal servant\":\r\n      srcImg = loyalServantIcon;\r\n      break;\r\n    default:\r\n      srcImg = devilIcon;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={classes.playerCardRoot}>\r\n      <h3>{player.name}</h3>\r\n      <p>click on button to {showRole ? \" hide \" : \" show \"} your character</p>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => setShowRole((i) => !i)}\r\n      >\r\n        {showRole ? \" hide \" : \" show \"}\r\n      </Button>\r\n      <Collapse in={showRole}>\r\n        <div\r\n          className={clsx(classes.characterSection, {\r\n            [classes.badCharacter]: player.role.isBad,\r\n            [classes.goodCharacter]: !player.role.isBad,\r\n          })}\r\n        >\r\n          <div className=\"header-show-character\">\r\n            <img\r\n              className=\"character-in-show-card\"\r\n              alt={`${player.role.name}-icon`}\r\n              src={srcImg}\r\n            />\r\n            <h3>{player.role.name}</h3>\r\n          </div>\r\n          {player.role.isBad ? (\r\n            <>\r\n              <p>هم تیمی های شما :</p>\r\n              {player.role.name === \"Morgana\" && (\r\n                <p>\r\n                  پرسیوال بین شما و مرلین باید به یکی اعتماد کند و او را به چشم\r\n                  مرلین ببیند. سعی کنید او را متقاعد کنید به شما اعتماد کند.\r\n                </p>\r\n              )}\r\n              {player.knowingPlayers.map((player, index) => (\r\n                <h5 key={index} style={{ color: \"black\" }}>\r\n                  {player}\r\n                </h5>\r\n              ))}\r\n            </>\r\n          ) : player.role.name === \"Percival\" ? (\r\n            <>\r\n              <p>\r\n                یکی از دو بازیکنان زیر مرلین است و دیگری خود را در نقش مرلین جا\r\n                زده است\r\n              </p>\r\n              {player.merlinsFace.map((merlin, index) => (\r\n                <h5 key={`merlin-face-${index}`}>{merlin}</h5>\r\n              ))}\r\n            </>\r\n          ) : player.role.name === \"Merlin\" ? (\r\n            <>\r\n              <p>\r\n                شما تیم شیطان را میشناسید ولی آنها نباید متوجه نقش شما در بازی\r\n                شوند\r\n              </p>\r\n              {player.knowingPlayers.map((player, index) => (\r\n                <h5 key={index} style={{ color: \"red\" }}>\r\n                  {player}\r\n                </h5>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <p>\r\n              شما از یاران وفادار پادشاهی هستید و در ماموریت ها حتما باید موفقیت\r\n              را انتخاب کنید\r\n            </p>\r\n          )}\r\n        </div>\r\n      </Collapse>\r\n      <Button\r\n        onClick={() => {\r\n          nextPlayer();\r\n        }}\r\n        style={{ margin: \"5px\", marginTop: \"15px\" }}\r\n        fullWidth\r\n        variant=\"contained\"\r\n        disabled={showRole}\r\n      >\r\n        Next player\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          prevPlayer();\r\n        }}\r\n        className=\"prev-player\"\r\n        disabled={!prevPlayer}\r\n        variant=\"contained\"\r\n      >\r\n        prev player\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport chooseSuccess from \"../assets/chooseSuccess.png\";\r\nimport chooseDefeat from \"../assets/chooseDefeat.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  missionsRoot: {\r\n    width: \"100vw\",\r\n    height: \"calc(100vh-16px)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    padding: \"16px\",\r\n  },\r\n  boardRoot: {\r\n    // width: \"85%\",\r\n    // height: \"90%\",\r\n    backgroundColor: \"#grey\",\r\n    border: \"2px solid black\",\r\n    borderRadius: \"5px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n  },\r\n  round: {\r\n    borderRadius: \"50%\",\r\n    border: \"2px solid red\",\r\n    margin: \"5px\",\r\n    height: \"10vh\",\r\n    width: \"10vh\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  missionFailed: {\r\n    backgroundColor: \"red\",\r\n  },\r\n  missionSuccess: {\r\n    backgroundColor: \"blue\",\r\n  },\r\n  currentMission: {\r\n    cursor: \"pointer\",\r\n    animationName: \"$blinker\",\r\n    animationDuration: \"2s\",\r\n    animationTimingFunction: \"linear\",\r\n    animationIterationCount: \"infinite\",\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  modalRoot: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid red\",\r\n    borderRadius: \"10px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    maxWidth: \"500px\",\r\n    minWidth: \"300px\",\r\n    margin: \"auto\",\r\n  },\r\n  playersName: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  buttonsSection: {\r\n    display: \"flex\",\r\n    gap: \"8px\",\r\n    margin: \"5px 2px\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n  \"@keyframes blinker\": {\r\n    from: { backgroundColor: \"red\" },\r\n    to: { backgroundColor: \"blue\" },\r\n  },\r\n}));\r\n\r\nconst Missions = ({ playersWithRole, onRestartWithSamePlayers, onNewGame }) => {\r\n  const classes = useStyles();\r\n  const PLAYERS_NO = playersWithRole.length;\r\n  const PLAYERS_ORDER_IN_MISSION = [\r\n    [2, 3, 2, 3, 3],\r\n    [2, 3, 4, 3, 4],\r\n    [2, 3, 5, 4, 4],\r\n    [3, 4, 4, 5, 5],\r\n    [3, 4, 4, 5, 5],\r\n    [3, 4, 4, 5, 5],\r\n  ];\r\n  const [openChoosePlayers, setOpenChoosePlayers] = useState(false);\r\n  const [isShowPlayersRole, setIsShowPlayersRole] = useState(false);\r\n  const [missions, setMissions] = useState(() => {\r\n    let tempRoadMap = PLAYERS_ORDER_IN_MISSION[PLAYERS_NO - 5];\r\n    let tempMission = [];\r\n    tempRoadMap.forEach((trm) => {\r\n      tempMission.push({ players: trm, status: \"not-completed\" });\r\n    });\r\n    return tempMission;\r\n  });\r\n  const [currentMission, setCurrentMission] = useState(0);\r\n  const [playersNoInMission, setPlayersNoInMission] = useState(\r\n    missions[currentMission]\r\n  );\r\n  const [playersInMission, setPlayersInMission] = useState([]);\r\n  const [votingFailedCounter, setVotingFailedCounter] = useState(0);\r\n  const [showMission, setShowMission] = useState(false);\r\n  const [winner, setWinner] = useState(\"\");\r\n\r\n  function missionCompleted(isFailed) {\r\n    let temp = missions;\r\n    if (!isFailed) {\r\n      temp[currentMission] = {\r\n        players: temp[currentMission].players,\r\n        status: \"success\",\r\n      };\r\n    } else {\r\n      temp[currentMission] = {\r\n        players: temp[currentMission].players,\r\n        status: \"failed\",\r\n      };\r\n    }\r\n    setPlayersNoInMission(missions[currentMission + 1]);\r\n    setCurrentMission((i) => i + 1);\r\n    setMissions(temp);\r\n    setShowMission(false);\r\n    setPlayersInMission([]);\r\n    if (currentMission >= 2) {\r\n      let counter = 0;\r\n      missions.forEach((mission) => {\r\n        if (mission.status === \"failed\") {\r\n          counter = counter + 1;\r\n        }\r\n      });\r\n      if (counter >= 3) {\r\n        setWinner(\"bad\");\r\n      } else if (currentMission - (counter + 1) >= 3) {\r\n        setWinner(\"good\");\r\n      }\r\n    }\r\n  }\r\n  if (isShowPlayersRole) {\r\n    return (\r\n      <div className=\"show-all-players-root\">\r\n        <h3>players:</h3>\r\n        {playersWithRole?.map((player) => {\r\n          return (\r\n            <p\r\n              className={\r\n                player.role.isBad\r\n                  ? \"show-bad-player-role\"\r\n                  : \"show-good-player-role\"\r\n              }\r\n              key={player.name}\r\n            >\r\n              {player.name} is {player.role.name}\r\n            </p>\r\n          );\r\n        })}\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={onRestartWithSamePlayers}\r\n        >\r\n          Restart With same players\r\n        </Button>\r\n        <Button variant=\"outlined\" color=\"primary\" onClick={onNewGame}>\r\n          start New Game\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n  if (winner) {\r\n    return (\r\n      <div>\r\n        <h1>Winner is {winner} guys</h1>\r\n        <Button\r\n          onClick={() => setIsShowPlayersRole(true)}\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n        >\r\n          Show player's role\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n  if (showMission) {\r\n    return (\r\n      <PlayerInMission\r\n        playersInMission={playersInMission}\r\n        onMissionCompleted={(result) => missionCompleted(result)}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.missionsRoot}>\r\n      <h3>ignored times: {votingFailedCounter}</h3>\r\n      <p>if 5 times ignore the kings, mission will be failed!</p>\r\n      <div className={classes.boardRoot}>\r\n        {missions &&\r\n          missions.length > 0 &&\r\n          missions.map((mission, index) => {\r\n            return (\r\n              <div\r\n                key={`mission-${index}`}\r\n                className={clsx(classes.round, {\r\n                  [classes.missionFailed]: mission.status === \"failed\",\r\n                  [classes.missionSuccess]: mission.status === \"success\",\r\n                  [classes.currentMission]: index === currentMission,\r\n                })}\r\n                onClick={() => {\r\n                  if (index === currentMission) {\r\n                    setOpenChoosePlayers(true);\r\n                  }\r\n                }}\r\n              >\r\n                {mission.players}\r\n              </div>\r\n            );\r\n          })}\r\n        <ChoosePlayers\r\n          open={openChoosePlayers}\r\n          handleClose={() => setOpenChoosePlayers(false)}\r\n          playersNoInMission={playersNoInMission.players}\r\n          playersWithRole={playersWithRole}\r\n          playersInMission={playersInMission}\r\n          setPlayersInMission={(p) => setPlayersInMission(p)}\r\n          onVotingResult={(isApproved) => {\r\n            if (isApproved) {\r\n              setVotingFailedCounter(0);\r\n              setShowMission(true);\r\n            } else if (votingFailedCounter < 5) {\r\n              setVotingFailedCounter((i) => i + 1);\r\n              setShowMission(false);\r\n            } else {\r\n              setVotingFailedCounter(0);\r\n              missionCompleted(false);\r\n              setShowMission(false);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Missions;\r\n\r\nconst ChoosePlayers = (props) => {\r\n  const classes = useStyles();\r\n  const [choosePlayersReminder, setChoosePlayersReminder] = useState(\r\n    props.playersNoInMission\r\n  );\r\n  const [showVotingResult, setShowVotingResult] = useState(false);\r\n\r\n  return (\r\n    <Modal\r\n      className={classes.modal}\r\n      open={props.open}\r\n      disableBackdropClick\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <div className={classes.modalRoot}>\r\n        {choosePlayersReminder > 0 ? (\r\n          <h5>{`Choose ${choosePlayersReminder} Players`}</h5>\r\n        ) : (\r\n          <h5>click start to vote</h5>\r\n        )}\r\n\r\n        <FormGroup className={classes.playersName}>\r\n          {props.playersWithRole.map((player, index) => {\r\n            return (\r\n              <FormControlLabel\r\n                key={`form-control-${index}`}\r\n                control={\r\n                  <Checkbox\r\n                    checked={props.playersInMission.includes(player)}\r\n                    onChange={() => {\r\n                      if (props.playersInMission.includes(player)) {\r\n                        props.setPlayersInMission((pim) =>\r\n                          pim.filter((p) => p !== player)\r\n                        );\r\n                        setChoosePlayersReminder((i) => i + 1);\r\n                      } else if (choosePlayersReminder > 0) {\r\n                        props.setPlayersInMission((players) => [\r\n                          ...players,\r\n                          player,\r\n                        ]);\r\n                        setChoosePlayersReminder((i) => i - 1);\r\n                      }\r\n                    }}\r\n                    name={player.name}\r\n                  />\r\n                }\r\n                label={player.name}\r\n              />\r\n            );\r\n          })}\r\n        </FormGroup>\r\n        <div className={classes.buttonsSection}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={choosePlayersReminder > 0 || showVotingResult}\r\n            onClick={() => setShowVotingResult(true)}\r\n          >\r\n            start\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={showVotingResult}\r\n            onClick={props.handleClose}\r\n          >\r\n            exit\r\n          </Button>\r\n        </div>\r\n        <Collapse in={showVotingResult}>\r\n          <div className={classes.buttonsSection}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                props.handleClose();\r\n                props.onVotingResult(true);\r\n                setShowVotingResult(false);\r\n              }}\r\n            >\r\n              Approve\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                props.handleClose();\r\n                props.onVotingResult(false);\r\n                props.setPlayersInMission([]);\r\n                setShowVotingResult(false);\r\n                setChoosePlayersReminder(props.playersNoInMission);\r\n              }}\r\n            >\r\n              Deny\r\n            </Button>\r\n          </div>\r\n        </Collapse>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst PlayerInMission = ({ playersInMission, onMissionCompleted }) => {\r\n  const [missionFailed, setMissionFailed] = useState(false);\r\n  const [indexCounter, setIndexCounter] = useState(0);\r\n  function handleClickVote(vote) {\r\n    setIndexCounter((i) => i + 1);\r\n    if (vote === \"failed\") {\r\n      setMissionFailed(true);\r\n    }\r\n    if (indexCounter >= playersInMission.length - 1) {\r\n      onMissionCompleted(missionFailed);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"show-mission-choice\">\r\n      <h2>{playersInMission[indexCounter].name}</h2>\r\n      <div>\r\n        <div>\r\n          <h4>موفقیت</h4>\r\n          <img\r\n            src={chooseSuccess}\r\n            alt=\"success\"\r\n            onClick={() => handleClickVote(\"success\")}\r\n          />\r\n        </div>\r\n        <div>\r\n          <h4>شکست</h4>\r\n          <img\r\n            src={chooseDefeat}\r\n            alt=\"defeat\"\r\n            onClick={() => {\r\n              if (!playersInMission[indexCounter].role.isBad) {\r\n                window.alert(\"شما نباید به ماموریت شکست بدهید\");\r\n              } else {\r\n                handleClickVote(\"failed\");\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* <Button\r\n        className=\"show-mission-choice-btn\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => handleClickVote(\"success\")}\r\n      >\r\n        Success\r\n      </Button>\r\n      <Button\r\n        className=\"show-mission-choice-btn\"\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        \r\n      >\r\n        fail\r\n      </Button> */}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Start from \"./components/Start\";\r\nimport ShowCharactersToPlayers from \"./components/ShowCharactersToPlayers\";\r\nimport Missions from \"./components/Missions\";\r\nimport \"./App.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    overflow: \"auto\",\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const [step, setStep] = useState(0);\r\n  const [players, setPlayers] = useState([]);\r\n  const [characters, setCharacters] = useState([]);\r\n  const [playersWithRole, setPlayersWithRole] = useState([]);\r\n  return (\r\n    <div className={classes.root}>\r\n      {step === 0 ? (\r\n        <Start\r\n          onStart={(players, characters) => {\r\n            setPlayers(players);\r\n            setCharacters(characters);\r\n            setStep(1);\r\n          }}\r\n        />\r\n      ) : step === 1 ? (\r\n        <ShowCharactersToPlayers\r\n          players={players}\r\n          characters={characters}\r\n          onGameStart={() => setStep(2)}\r\n          onPlayersGetRole={(pr) => setPlayersWithRole(pr)}\r\n        />\r\n      ) : step === 2 ? (\r\n        <Missions playersWithRole={playersWithRole} \r\n        onNewGame={()=>{\r\n          setStep(0);\r\n          setPlayers([]);\r\n          setCharacters([]);\r\n          setPlayersWithRole([]);\r\n        }}\r\n        onRestartWithSamePlayers={()=> {\r\n          setStep(1);\r\n          setPlayersWithRole([]);\r\n        }}/>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}